// Code generated by gogen; DO NOT EDIT.

package main

import (
	"os"
	"unsafe"
)

type (
	int8_t         = int8
	int16_t        = int16
	int32_t        = int32
	int64_t        = int64
	uint8_t        = uint8
	uint16_t       = uint16
	uint32_t       = uint32
	uint64_t       = uint64
	int_least8_t   = int8
	int_least16_t  = int16
	int_least32_t  = int32
	int_least64_t  = int64
	uint_least8_t  = uint8
	uint_least16_t = uint16
	uint_least32_t = uint32
	uint_least64_t = uint64
	int_fast8_t    = int8
	int_fast16_t   = int32
	int_fast32_t   = int32
	int_fast64_t   = int64
	uint_fast8_t   = uint8
	uint_fast16_t  = uint32
	uint_fast32_t  = uint32
	uint_fast64_t  = uint64
	intmax_t       = int64
	uintmax_t      = uint64
	undefined      = uint8
	byte           = uint8
	uchar          = uint8
	dwfenc         = uint8
	word           = uint16
	dword          = uint32
	longlong       = int64
	qword          = uint64
	ushort         = uint16
	uint           = uint32
	ulong          = uint64
	ulonglong      = uint64
	float10        = float64
	undefined1     = uint8
	undefined2     = uint16
	_cgoa_1_main   struct {
		arr [3]uint8
	}
)

type (
	undefined3   = _cgoa_1_main
	undefined4   = uint32
	_cgoa_2_main struct {
		arr [5]uint8
	}
)

type (
	undefined5   = _cgoa_2_main
	_cgoa_3_main struct {
		arr [6]uint8
	}
)

type (
	undefined6   = _cgoa_3_main
	_cgoa_4_main struct {
		arr [7]uint8
	}
)

type (
	undefined7   = _cgoa_4_main
	undefined8   = uint64
	_cgoa_5_main struct {
		arr [16]uint8
	}
)

type (
	arr16        = _cgoa_5_main
	_cgoa_6_main struct {
		arr [16]uint32
	}
)
type arr64 = _cgoa_6_main

func mul(l uint32, h uint32, l2 uint32, h2 uint32) uint64 {
	return uint64(l)<<32 | uint64(h)*uint64(l2)<<32 | uint64(h2)
}

func div(l uint32, h uint32, l2 uint32, h2 uint32) uint64 {
	return uint64(l)<<32 | uint64(h)/uint64(l2)<<32 | uint64(h2)
}

func asm1() uint64 {
	var uVar1 uint64
	var lVar2 int64
	var highXor uint32
	var v uint32
	var elem uint32
	var uVar6 uint32
	var puVar9 uint64
	var uVar10 uint64
	var iVar11 int64
	var uVar12 uint64
	var data [8]uint8 = [8]uint8{uint8(9), uint8(153), uint8(138), uint8(123), uint8(254), uint8(70), uint8(194), uint8(240)}
	var i int32
	var out uint64
	var uStack_30 uint32
	uVar10 = mul(uint32(int32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(int32(1)))))+int32(62310)), uint32(0), uint32(4866), uint32(0))
	lVar2 = int64(uVar10 + uint64(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(int32(1))))))
	uVar10 = mul(uint32(lVar2), uint32(lVar2>>int32(32)), uint32(7452563), uint32(0))
	out = uVar10 + uint64(8191878)
	highXor = uint32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(int32(2)))))
	uVar1 = out >> int32(18)
	uVar6 = uint32(out)
	elem = uint32(out >> int32(32))
	iVar11 = int64(div(uVar6, elem, uint32(1669447322), uint32(0)))
	lVar2 = int64(uVar1 + uint64(iVar11))
	uVar10 = mul(uint32(lVar2), uint32(lVar2>>int32(32)), uint32(2), uint32(0))
	uVar12 = mul(highXor+uint32(62310), uint32(0), uint32(5684), uint32(0))
	v = uint32(uVar12 + uint64(highXor))
	uVar12 = mul(v+uint32(1), uint32(uVar12>>int32(32)+(uVar12<<int32(32)|uint64(highXor))+func() uint64 {
		if uint32(4294967294) < v {
			return 1
		} else {
			return 0
		}
	}()), uVar6, elem)
	lVar2 = int64(uVar12 + uVar10 + uint64(2957157))
	highXor = uint32(lVar2 >> int32(32))
	puVar9 = out
	uVar6 = uint32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(int32(3)))))
	v = uint32(out >> int32(18))
	iVar11 = int64(div(uint32(puVar9), highXor, uint32(1669447322), uint32(0)))
	lVar2 = iVar11 + int64(highXor>>int32(18)<<int32(32)|v) | int64(highXor<<int32(14)+uint32(2217869))
	uVar10 = mul(uint32(lVar2), uint32(lVar2>>int32(32)), uint32(3), uint32(0))
	uVar12 = mul(uVar6+uint32(62310), uint32(0), uint32(6504), uint32(0))
	v = uint32(uVar12 + uint64(uVar6))
	uVar12 = mul(v+uint32(1), uint32(uVar12>>int32(32)+(uVar12<<int32(32)|uint64(uVar6))+func() uint64 {
		if uint32(4294967294) < v {
			return 1
		} else {
			return 0
		}
	}()), uint32(puVar9), highXor)
	uVar1 = uVar12 + uVar10
	puVar9 = uVar1
	v = uint32(uVar1 >> int32(32))
	uStack_30 = v
	iVar11 = int64(div(uint32(puVar9), v, uint32(1669447322), uint32(0)))
	lVar2 = int64(uVar1>>int32(18) + uint64(iVar11))
	highXor = uint32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(int32(4)))))
	uVar10 = mul(highXor+uint32(62310), uint32(0), uint32(7326), uint32(0))
	v = uint32(uVar10 + uint64(highXor))
	uVar10 = mul(v+uint32(1), uint32(uVar10>>int32(32)+(uVar10<<int32(32)|uint64(highXor))+func() uint64 {
		if uint32(4294967294) < v {
			return 1
		} else {
			return 0
		}
	}()), uint32(puVar9), uStack_30)
	uVar12 = mul(uint32(lVar2), uint32(lVar2>>int32(32)), uint32(4), uint32(0))
	uVar1 = uVar12 + uVar10 + uint64(11828637)
	v = uint32(uVar1 >> int32(32))
	out = (uVar1>>int32(19)+uint64(v>>int32(16)<<int32(32)|v))<<int32(32) | (uint64(v>>int32(16)+v) + uVar1&uint64(65520))
	i = int32(7)
	for {
		v = uStack_30
		highXor = uStack_30>>int32(7) ^ uStack_30
		elem = uint32(uint64(uStack_30<<int32(25)) ^ out)
		uVar6 = uStack_30 >> int32(25)
		iVar11 = int64(div(uint32(out), uStack_30, uint32(106), uint32(0)))
		lVar2 = (iVar11+int64(uVar6))<<int32(32) | int64(elem>>int32(25)) | int64(highXor<<int32(7))
		uVar6 = uint32(lVar2)
		highXor = uint32(lVar2 >> int32(32))
		elem = uint32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(i))))
		uVar10 = mul(uint32(i*i), uint32(i*i>>int32(31)), uVar6, highXor)
		uVar12 = mul(elem+uint32(1), func() uint32 {
			if uint32(4294967294) < elem {
				return 1
			} else {
				return 0
			}
		}(), uint32(out), v)
		out = uVar10 + uVar12 + uint64(elem*elem*elem)
		v = uint32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(i))))
		iVar11 = int64(div(uVar6, highXor, uint32(5321), uint32(0)))
		out = uint64(iVar11+int64(uint32(int32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(i))))+(int32(399)-int32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer((*uint8)(unsafe.Pointer(&data)))) + uintptr(int32(7)))))))*v*v*uint32(i))) + out
		i = i + -1
		if !(-1 < i) {
			break
		}
	}
	return out
}

func _cgo_main() int32 {
	asm1()
	return int32(0)
}

func main() {
	os.Exit(int(_cgo_main()))
}
